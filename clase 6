{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Páginas para programar python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. www.mybinder.org\n",
    "2. www.kaggle.com\n",
    "3. www.jupyter.org/try\n",
    "4. `github jobish` https://mybinder.org/v2/gh/jobish03/jobish03-Visualizacion_de_datos_para_la_toma_de_decisiones/main?filepath=welcome_binder.ipynb\n",
    "\n",
    "Los paquetes hay que incluir en el archivo `requirements.txt`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting xlrd\n",
      "  Downloading xlrd-2.0.1-py2.py3-none-any.whl (96 kB)\n",
      "\u001b[K     |████████████████████████████████| 96 kB 3.1 MB/s eta 0:00:011\n",
      "\u001b[?25hInstalling collected packages: xlrd\n",
      "Successfully installed xlrd-2.0.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install xlrd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\n",
      "  Downloading openpyxl-3.0.9-py2.py3-none-any.whl (242 kB)\n",
      "\u001b[K     |████████████████████████████████| 242 kB 3.2 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting et-xmlfile\n",
      "  Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n",
      "Installing collected packages: et-xmlfile, openpyxl\n",
      "Successfully installed et-xmlfile-1.1.0 openpyxl-3.0.9\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Coverage</th>\n",
       "      <th>OdName</th>\n",
       "      <th>AREA</th>\n",
       "      <th>AreaName</th>\n",
       "      <th>REG</th>\n",
       "      <th>RegName</th>\n",
       "      <th>DEV</th>\n",
       "      <th>DevName</th>\n",
       "      <th>1980</th>\n",
       "      <th>...</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>Unnamed: 43</th>\n",
       "      <th>Unnamed: 44</th>\n",
       "      <th>Unnamed: 45</th>\n",
       "      <th>Unnamed: 46</th>\n",
       "      <th>Unnamed: 47</th>\n",
       "      <th>Unnamed: 48</th>\n",
       "      <th>Unnamed: 49</th>\n",
       "      <th>Unnamed: 50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Immigrants</td>\n",
       "      <td>Foreigners</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>935.0</td>\n",
       "      <td>Asia</td>\n",
       "      <td>5501.0</td>\n",
       "      <td>Southern Asia</td>\n",
       "      <td>902.0</td>\n",
       "      <td>Developing regions</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2635.0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Immigrants</td>\n",
       "      <td>Foreigners</td>\n",
       "      <td>Albania</td>\n",
       "      <td>908.0</td>\n",
       "      <td>Europe</td>\n",
       "      <td>925.0</td>\n",
       "      <td>Southern Europe</td>\n",
       "      <td>901.0</td>\n",
       "      <td>Developed regions</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>620.0</td>\n",
       "      <td>603.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Type    Coverage       OdName   AREA AreaName     REG  \\\n",
       "0  Immigrants  Foreigners  Afghanistan  935.0     Asia  5501.0   \n",
       "1  Immigrants  Foreigners      Albania  908.0   Europe   925.0   \n",
       "\n",
       "           RegName    DEV             DevName  1980  ...    2012    2013  \\\n",
       "0    Southern Asia  902.0  Developing regions  16.0  ...  2635.0  2004.0   \n",
       "1  Southern Europe  901.0   Developed regions   1.0  ...   620.0   603.0   \n",
       "\n",
       "   Unnamed: 43  Unnamed: 44  Unnamed: 45  Unnamed: 46  Unnamed: 47  \\\n",
       "0          NaN          NaN          NaN          NaN          NaN   \n",
       "1          NaN          NaN          NaN          NaN          NaN   \n",
       "\n",
       "   Unnamed: 48  Unnamed: 49  Unnamed: 50  \n",
       "0          NaN          NaN          NaN  \n",
       "1          NaN          NaN          NaN  \n",
       "\n",
       "[2 rows x 51 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_excel('Canada.xlsx', \n",
    "                 sheet_name='Canada by Citizenship',\n",
    "                 skiprows= range(20),\n",
    "                 skipfooter=2,\n",
    "                 engine='openpyxl'\n",
    "                )\n",
    "df.head(2)\n",
    "                 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# descripcion de base de datos. \n",
    "Explica el numero de persoas que llegaron a canada desde 1980-2013 desde diferentes paises. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([       'Type',    'Coverage',      'OdName',        'AREA',\n",
       "          'AreaName',         'REG',     'RegName',         'DEV',\n",
       "           'DevName',          1980,          1981,          1982,\n",
       "                1983,          1984,          1985,          1986,\n",
       "                1987,          1988,          1989,          1990,\n",
       "                1991,          1992,          1993,          1994,\n",
       "                1995,          1996,          1997,          1998,\n",
       "                1999,          2000,          2001,          2002,\n",
       "                2003,          2004,          2005,          2006,\n",
       "                2007,          2008,          2009,          2010,\n",
       "                2011,          2012,          2013, 'Unnamed: 43',\n",
       "       'Unnamed: 44', 'Unnamed: 45', 'Unnamed: 46', 'Unnamed: 47',\n",
       "       'Unnamed: 48', 'Unnamed: 49', 'Unnamed: 50'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['Type',    'Coverage',         'AREA',\n",
    "         'REG',         'DEV','Unnamed: 43',\n",
    "       'Unnamed: 44', 'Unnamed: 45', 'Unnamed: 46', 'Unnamed: 47',\n",
    "       'Unnamed: 48', 'Unnamed: 49', 'Unnamed: 50'],\n",
    "        \n",
    "        axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([  'OdName', 'AreaName',  'RegName',  'DevName',       1980,       1981,\n",
       "             1982,       1983,       1984,       1985,       1986,       1987,\n",
       "             1988,       1989,       1990,       1991,       1992,       1993,\n",
       "             1994,       1995,       1996,       1997,       1998,       1999,\n",
       "             2000,       2001,       2002,       2003,       2004,       2005,\n",
       "             2006,       2007,       2008,       2009,       2010,       2011,\n",
       "             2012,       2013],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([ 'Country', 'Contnent',   'Region',  'DevName',       1980,       1981,\n",
       "             1982,       1983,       1984,       1985,       1986,       1987,\n",
       "             1988,       1989,       1990,       1991,       1992,       1993,\n",
       "             1994,       1995,       1996,       1997,       1998,       1999,\n",
       "             2000,       2001,       2002,       2003,       2004,       2005,\n",
       "             2006,       2007,       2008,       2009,       2010,       2011,\n",
       "             2012,       2013],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={'OdName': 'Country', 'AreaName': 'Contnent',  'RegName':'Region'},  \n",
    "                   inplace =True)\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all(isinstance(x,str) for x in df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(math.pi)\n",
    "type('math.pi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all(isinstance(x,str)for x in df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Country', 'Contnent', 'Region', 'DevName', '1980', '1981', '1982',\n",
       "       '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991',\n",
       "       '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000',\n",
       "       '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009',\n",
       "       '2010', '2011', '2012', '2013'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns=list(map(str,df.columns))\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all(isinstance(x,str)for x in df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Contnent</th>\n",
       "      <th>Region</th>\n",
       "      <th>DevName</th>\n",
       "      <th>1980</th>\n",
       "      <th>1981</th>\n",
       "      <th>1982</th>\n",
       "      <th>1983</th>\n",
       "      <th>1984</th>\n",
       "      <th>1985</th>\n",
       "      <th>...</th>\n",
       "      <th>2005</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>2009</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Southern Asia</td>\n",
       "      <td>Developing regions</td>\n",
       "      <td>16.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3436.0</td>\n",
       "      <td>3009.0</td>\n",
       "      <td>2652.0</td>\n",
       "      <td>2111.0</td>\n",
       "      <td>1746.0</td>\n",
       "      <td>1758.0</td>\n",
       "      <td>2203.0</td>\n",
       "      <td>2635.0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>175869.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>Europe</td>\n",
       "      <td>Southern Europe</td>\n",
       "      <td>Developed regions</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1223.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>702.0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>716.0</td>\n",
       "      <td>561.0</td>\n",
       "      <td>539.0</td>\n",
       "      <td>620.0</td>\n",
       "      <td>603.0</td>\n",
       "      <td>47094.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Country Contnent           Region             DevName  1980  1981  \\\n",
       "0  Afghanistan     Asia    Southern Asia  Developing regions  16.0  39.0   \n",
       "1      Albania   Europe  Southern Europe   Developed regions   1.0   0.0   \n",
       "\n",
       "   1982  1983  1984   1985  ...    2005    2006    2007    2008    2009  \\\n",
       "0  39.0  47.0  71.0  340.0  ...  3436.0  3009.0  2652.0  2111.0  1746.0   \n",
       "1   0.0   0.0   0.0    0.0  ...  1223.0   856.0   702.0   560.0   716.0   \n",
       "\n",
       "     2010    2011    2012    2013     Total  \n",
       "0  1758.0  2203.0  2635.0  2004.0  175869.0  \n",
       "1   561.0   539.0   620.0   603.0   47094.0  \n",
       "\n",
       "[2 rows x 39 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Total']=df.iloc[:,5:].sum(axis=1)\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pregunta de investigacion \n",
    "# ¿Cuantas personas llegaron a canada desde japan entre el 1980-2013?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Contnent</th>\n",
       "      <th>Region</th>\n",
       "      <th>DevName</th>\n",
       "      <th>1980</th>\n",
       "      <th>1981</th>\n",
       "      <th>1982</th>\n",
       "      <th>1983</th>\n",
       "      <th>1984</th>\n",
       "      <th>1985</th>\n",
       "      <th>1986</th>\n",
       "      <th>...</th>\n",
       "      <th>2005</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>2009</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>Asia</td>\n",
       "      <td>Southern Asia</td>\n",
       "      <td>Developing regions</td>\n",
       "      <td>16.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>496.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3436.0</td>\n",
       "      <td>3009.0</td>\n",
       "      <td>2652.0</td>\n",
       "      <td>2111.0</td>\n",
       "      <td>1746.0</td>\n",
       "      <td>1758.0</td>\n",
       "      <td>2203.0</td>\n",
       "      <td>2635.0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>175869.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>Europe</td>\n",
       "      <td>Southern Europe</td>\n",
       "      <td>Developed regions</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1223.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>702.0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>716.0</td>\n",
       "      <td>561.0</td>\n",
       "      <td>539.0</td>\n",
       "      <td>620.0</td>\n",
       "      <td>603.0</td>\n",
       "      <td>47094.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Contnent           Region             DevName  1980  1981  1982  \\\n",
       "Country                                                                       \n",
       "Afghanistan     Asia    Southern Asia  Developing regions  16.0  39.0  39.0   \n",
       "Albania       Europe  Southern Europe   Developed regions   1.0   0.0   0.0   \n",
       "\n",
       "             1983  1984   1985   1986  ...    2005    2006    2007    2008  \\\n",
       "Country                                ...                                   \n",
       "Afghanistan  47.0  71.0  340.0  496.0  ...  3436.0  3009.0  2652.0  2111.0   \n",
       "Albania       0.0   0.0    0.0    1.0  ...  1223.0   856.0   702.0   560.0   \n",
       "\n",
       "               2009    2010    2011    2012    2013     Total  \n",
       "Country                                                        \n",
       "Afghanistan  1746.0  1758.0  2203.0  2635.0  2004.0  175869.0  \n",
       "Albania       716.0   561.0   539.0   620.0   603.0   47094.0  \n",
       "\n",
       "[2 rows x 38 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.set_index('Country',inplace=True)\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27006.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years=list(map(str,range(1980,2014)))\n",
    "df.loc['Japan','Total']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1980     701\n",
       "1981     756\n",
       "1982     598\n",
       "1983     309\n",
       "1984     246\n",
       "1985     198\n",
       "1986     248\n",
       "1987     422\n",
       "1988     324\n",
       "1989     494\n",
       "1990     379\n",
       "1991     506\n",
       "1992     605\n",
       "1993     907\n",
       "1994     956\n",
       "1995     826\n",
       "1996     994\n",
       "1997     924\n",
       "1998     897\n",
       "1999    1083\n",
       "2000    1010\n",
       "2001    1092\n",
       "2002     806\n",
       "2003     817\n",
       "2004     973\n",
       "2005    1067\n",
       "2006    1212\n",
       "2007    1250\n",
       "2008    1284\n",
       "2009    1194\n",
       "2010    1168\n",
       "2011    1265\n",
       "2012    1214\n",
       "2013     982\n",
       "Name: Japan, dtype: object"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years=list(map(str,range(1980,2014)))\n",
    "df.loc['Japan',years]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "mpl.style.use('ggplot')\n",
    "print(plt.style.available)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f5ad54397d0>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "years= list(map(str,range(1980,2014)))\n",
    "df.loc['Japan',years].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pregunta de investigacion\n",
    "# cuantas personas llegaron de india y china desde 1980 - 2013?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows',500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f5ad4690790>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ndf=df.loc[['India','China'],years].transpose()\n",
    "ndf.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f5ad45c6c10>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ndf=df.loc[['India','China'],years].transpose()\n",
    "ndf.plot(kind= 'area',alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(25, 78000, 'Max')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ndf=df.loc[['India','China'],years].transpose()\n",
    "ndf.plot(kind= 'area',alpha=0.5)\n",
    "plt.text(25,78000,'Max')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion \n",
    "LLego mas gente de china que de india"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pregunta de investigacion\n",
    "#como seria el comportamiento de migrantes de los 5 paises con mas immigrantes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_cinco= df.sort_values(['Total'],\n",
    "              ascending=False).head(7)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_cinco.drop(['Total','Unknown'],axis=0, inplace="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "no numeric data to plot",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_83/4014862458.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtop_cinco\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtop_cinco\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtop_cinco\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    845\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 847\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/pandas/plotting/_matplotlib/__init__.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, kind, **kwargs)\u001b[0m\n\u001b[1;32m     59\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ax\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"left_ax\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 261\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    262\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    408\u001b[0m         \u001b[0;31m# no non-numeric frames or series allowed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 410\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no numeric data to plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m         \u001b[0;31m# GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: no numeric data to plot"
     ]
    }
   ],
   "source": [
    "top_cinco=top_cinco.transpose()\n",
    "top_cinco.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
